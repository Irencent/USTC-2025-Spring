theme_minimal()
# 下降国家
trend_change %>%
top_n(-10, Change) %>%
ggplot(aes(x = reorder(Country, Change), y = Change, fill = Change)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "幸福指数下降最多的国家", y = "变化值", x = "") +
theme_minimal()
# 自定义想看的国家
top_countries <- c("Finland", "Norway", "Denmark", "United States", "China", "India")
library(ggplot2)
happiness_all %>%
filter(Country %in% top_countries) %>%
ggplot(aes(x = Year, y = HappinessScore, color = Country)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "代表国家幸福指数随时间变化", y = "幸福指数", x = "年份") +
theme_minimal()
ggsave("../plots/代表国家指数随时间变化", width = 8, height = 5, dpi = 300)
# 自定义想看的国家
top_countries <- c("Finland", "Norway", "Denmark", "United States", "China", "India")
library(ggplot2)
happiness_all %>%
filter(Country %in% top_countries) %>%
ggplot(aes(x = Year, y = HappinessScore, color = Country)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "代表国家幸福指数随时间变化", y = "幸福指数", x = "年份") +
theme_minimal()
ggsave("../plots/代表国家指数随时间变化.png", width = 8, height = 5, dpi = 300)
global_trend <- happiness_all %>%
group_by(Year) %>%
summarise(GlobalAvg = mean(HappinessScore, na.rm = TRUE))
ggplot(global_trend, aes(x = Year, y = GlobalAvg)) +
geom_line(size = 1.2, color = "blue") +
geom_point(size = 2, color = "blue") +
labs(title = "全球平均幸福指数随时间变化", y = "全球幸福指数均值", x = "年份") +
theme_minimal()
ggsave("../plots/全球平均幸福指数随时间变化", width = 8, height = 5, dpi = 300)
global_trend <- happiness_all %>%
group_by(Year) %>%
summarise(GlobalAvg = mean(HappinessScore, na.rm = TRUE))
ggplot(global_trend, aes(x = Year, y = GlobalAvg)) +
geom_line(size = 1.2, color = "blue") +
geom_point(size = 2, color = "blue") +
labs(title = "全球平均幸福指数随时间变化", y = "全球幸福指数均值", x = "年份") +
theme_minimal()
ggsave("../plots/全球平均幸福指数随时间变化.png", width = 8, height = 5, dpi = 300)
library(dplyr)
df_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
drop_na()
# 将国家名设为行名（仅用于聚类）
rownames(df_2019) <- df_2019$Country
data_for_cluster <- df_2019 %>% select(-Country)
data_scaled <- scale(data_for_cluster)  # Z-score 标准化
set.seed(42)  # 可重复性
k <- 4  # 设置分为4类（你可尝试 3、5、6 等）
kmeans_result <- kmeans(data_scaled, centers = k)
# 将聚类结果加入原表格
df_2019$Cluster <- as.factor(kmeans_result$cluster)
fviz_cluster(kmeans_result,
data = data_scaled,
geom = "point",
labelsize = 10,
main = "2019年国家幸福特征聚类",
repel = TRUE)
library(dplyr)
df_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
drop_na()
# 将国家名设为行名（仅用于聚类）
rownames(df_2019) <- df_2019$Country
data_for_cluster <- df_2019 %>% select(-Country)
data_scaled <- scale(data_for_cluster)  # Z-score 标准化
set.seed(42)  # 可重复性
k <- 4  # 设置分为4类（你可尝试 3、5、6 等）
kmeans_result <- kmeans(data_scaled, centers = k)
# 将聚类结果加入原表格
df_2019$Cluster <- as.factor(kmeans_result$cluster)
fviz_cluster(kmeans_result,
data = data_scaled,
geom = "point",
labelsize = 10,
main = "2019年国家幸福特征聚类",
repel = TRUE)
library(dplyr)
library(factoextra)
df_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
drop_na()
# 将国家名设为行名（仅用于聚类）
rownames(df_2019) <- df_2019$Country
data_for_cluster <- df_2019 %>% select(-Country)
data_scaled <- scale(data_for_cluster)  # Z-score 标准化
set.seed(42)  # 可重复性
k <- 4  # 设置分为4类（你可尝试 3、5、6 等）
kmeans_result <- kmeans(data_scaled, centers = k)
# 将聚类结果加入原表格
df_2019$Cluster <- as.factor(kmeans_result$cluster)
fviz_cluster(kmeans_result,
data = data_scaled,
geom = "point",
labelsize = 10,
main = "2019年国家幸福特征聚类",
repel = TRUE)
df_2019 %>%
group_by(Cluster) %>%
summarise(国家数量 = n()) %>%
arrange(desc(国家数量))
# 查看某一类的国家
df_2019 %>% filter(Cluster == 1)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(ggplot2)
library(dplyr)
# 世界地图（国家级，sf 格式）
world <- ne_countries(scale = "medium", returnclass = "sf")
# 我们的聚类结果（2019 年，含 Cluster 列）
df_2019 <- df_2019 %>% select(Country, Cluster)
# 合并地图和聚类信息（按国家名）
# 注意：world$name 是地图国家名
map_data <- world %>%
left_join(df_2019, by = c("name" = "Country"))
missing <- df_2019$Country[!df_2019$Country %in% world$name]
print(missing)
df_2019$Country <- recode(df_2019$Country,
"United States" = "United States of America",
"Czech Republic" = "Czechia",
"Trinidad & Tobago" = "Trinidad and Tobago",
"Northern Cyprus" = "Cyprus",  # 地图不单列北塞浦路斯
"Dominican Republic" = "Dominican Rep.",
"Bosnia and Herzegovina" = "Bosnia and Herz.",
"Ivory Coast" = "Côte d'Ivoire",
"Congo (Brazzaville)" = "Republic of the Congo",
"Palestinian Territories" = "Palestine",
"Congo (Kinshasa)" = "Democratic Republic of the Congo",
"Swaziland" = "Eswatini",  # 改国名了
"Central African Republic" = "Central African Rep.",
"South Sudan" = "S. Sudan"
)
ggplot(map_data) +
geom_sf(aes(fill = Cluster), color = "white") +
scale_fill_brewer(palette = "Set2", na.value = "grey90") +
labs(title = "2019年全球幸福特征聚类地图", fill = "聚类类别") +
theme_minimal()
# 幸福指数地图（同样按 2019）
happiness_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, HappinessScore)
map_score <- world %>%
left_join(happiness_2019, by = c("name" = "Country"))
ggplot(map_score) +
geom_sf(aes(fill = HappinessScore), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
labs(title = "2019年全球幸福指数地图", fill = "幸福指数") +
theme_minimal()
library(showtext)
# 自动使用 showtext 渲染字体
showtext_auto()
# 添加中文字体
font_add("cn", "./STHeiti Medium.ttc")
theme_set(theme_minimal(base_family = "cn"))
library(showtext)
library(ggplot2)
# 自动使用 showtext 渲染字体
showtext_auto()
# 添加中文字体
font_add("cn", "./STHeiti Medium.ttc")
theme_set(theme_minimal(base_family = "cn"))
library(tidyverse)
library(stringr)
file_list <- list.files(path = "../data", pattern = "*.csv", full.names = TRUE)
happiness_all <- map_df(file_list, function(file_path) {
df <- read.csv(file_path)
year <- as.numeric(str_extract(file_path, "\\d{4}"))
# 标准化列
df_standardized <- tibble(
Year = year,
Country = coalesce(df$Country, df$Country.or.region),
HappinessScore = coalesce(df$Happiness.Score, df$Score),
GDP = coalesce(df$Economy..GDP.per.Capita., df$GDP.per.capita),
SocialSupport = coalesce(df$Family, df$Social.support),
Health = coalesce(df$Health..Life.Expectancy., df$Healthy.life.expectancy),
Freedom = coalesce(df$Freedom, df$Freedom.to.make.life.choices),
Generosity = df$Generosity,
Trust = coalesce(df$Trust..Government.Corruption., df$Perceptions.of.corruption)
)
# 将所有数值列转换为 numeric
num_cols <- c("HappinessScore", "GDP", "SocialSupport", "Health", "Freedom", "Generosity", "Trust")
df_standardized <- df_standardized %>%
mutate(across(all_of(num_cols), as.numeric))
return(df_standardized)
})
# 查看缺失情况
colSums(is.na(happiness_all))
# 如需填充或删除缺失
happiness_all <- na.omit(happiness_all)
#happiness_all
# 查看缺失情况
colSums(is.na(happiness_all))
# 如需填充或删除缺失
happiness_all <- na.omit(happiness_all)
#happiness_all
ggplot(happiness_all, aes(x = HappinessScore)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "white") +
labs(title = "全球幸福指数分布")
# 简单散点图看 GDP 与幸福关系
ggplot(happiness_all, aes(x = GDP, y = HappinessScore)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "人均GDP与幸福指数关系"
# 简单散点图看 GDP 与幸福关系
ggplot(happiness_all, aes(x = GDP, y = HappinessScore)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "人均GDP与幸福指数关系")
library(ggcorrplot)
cor_data <- happiness_all %>%
select(HappinessScore, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
na.omit()  # 删除缺失值
# 计算皮尔逊相关系数矩阵
cor_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
print(round(cor_matrix, 2))
ggcorrplot(cor_matrix,
method = "circle",       # 圆圈形式
type = "lower",          # 显示下三角
lab = TRUE,              # 显示数值
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "幸福指数相关性矩阵",
tl.cex = 12)
ggsave("../plots/幸福指数相关性矩阵.png", width = 8, height = 5, dpi = 300)
cor_data <- happiness_all %>%
select(HappinessScore, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
na.omit()  # 删除缺失值
# 计算皮尔逊相关系数矩阵
cor_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
print(round(cor_matrix, 2))
{r}
library(ggcorrplot)
ggcorrplot(cor_matrix,
method = "circle",       # 圆圈形式
type = "lower",          # 显示下三角
lab = TRUE,              # 显示数值
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "幸福指数相关性矩阵",
tl.cex = 12)
ggsave("../plots/幸福指数相关性矩阵.png", width = 8, height = 5, dpi = 300)
{r}
library(ggcorrplot)
ggcorrplot(cor_matrix,
method = "circle",       # 圆圈形式
type = "lower",          # 显示下三角
lab = TRUE,              # 显示数值
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "幸福指数相关性矩阵",
tl.cex = 12)
library(ggcorrplot)
ggcorrplot(cor_matrix,
method = "circle",       # 圆圈形式
type = "lower",          # 显示下三角
lab = TRUE,              # 显示数值
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "幸福指数相关性矩阵",
tl.cex = 12)
model <- lm(HappinessScore ~ GDP + SocialSupport + Health + Freedom + Generosity + Trust, data = cor_data)
summary(model)
model <- lm(HappinessScore ~ GDP + SocialSupport + Health + Freedom + Generosity + Trust, data = cor_data)
summary(model)
# 自定义想看的国家
top_countries <- c("Finland", "Norway", "Denmark", "United States", "China", "India")
library(ggplot2)
happiness_all %>%
filter(Country %in% top_countries) %>%
ggplot(aes(x = Year, y = HappinessScore, color = Country)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "代表国家幸福指数随时间变化", y = "幸福指数", x = "年份") +
theme_minimal()
global_trend <- happiness_all %>%
group_by(Year) %>%
summarise(GlobalAvg = mean(HappinessScore, na.rm = TRUE))
ggplot(global_trend, aes(x = Year, y = GlobalAvg)) +
geom_line(size = 1.2, color = "blue") +
geom_point(size = 2, color = "blue") +
labs(title = "全球平均幸福指数随时间变化", y = "全球幸福指数均值", x = "年份") +
theme_minimal()
# 计算每个国家的首尾年份差值
trend_change <- happiness_all %>%
group_by(Country) %>%
filter(n() >= 2) %>%
arrange(Year) %>%
summarise(Change = last(HappinessScore) - first(HappinessScore)) %>%
arrange(desc(Change))
# 幸福提升最多的前10个国家
head(trend_change, 10)
# 计算每个国家的首尾年份差值
trend_change <- happiness_all %>%
group_by(Country) %>%
filter(n() >= 2) %>%
arrange(Year) %>%
summarise(Change = last(HappinessScore) - first(HappinessScore)) %>%
arrange(desc(Change))
# 上升国家
trend_change %>%
top_n(10, Change) %>%
ggplot(aes(x = reorder(Country, Change), y = Change, fill = Change)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "幸福指数提升最多的国家", y = "变化值", x = "") +
theme_minimal()
# 计算每个国家的首尾年份差值
trend_change <- happiness_all %>%
group_by(Country) %>%
filter(n() >= 2) %>%
arrange(Year) %>%
summarise(Change = last(HappinessScore) - first(HappinessScore)) %>%
arrange(desc(Change))
# 下降国家
trend_change %>%
top_n(-10, Change) %>%
ggplot(aes(x = reorder(Country, Change), y = Change, fill = Change)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "幸福指数下降最多的国家", y = "变化值", x = "") +
theme_minimal()
library(dplyr)
library(factoextra)
df_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, GDP, SocialSupport, Health, Freedom, Generosity, Trust) %>%
drop_na()
# 将国家名设为行名（仅用于聚类）
rownames(df_2019) <- df_2019$Country
data_for_cluster <- df_2019 %>% select(-Country)
data_scaled <- scale(data_for_cluster)  # Z-score 标准化
set.seed(42)  # 可重复性
k <- 4  # 设置分为4类（你可尝试 3、5、6 等）
kmeans_result <- kmeans(data_scaled, centers = k)
# 将聚类结果加入原表格
df_2019$Cluster <- as.factor(kmeans_result$cluster)
fviz_cluster(kmeans_result,
data = data_scaled,
geom = "point",
labelsize = 10,
main = "2019年国家幸福特征聚类",
repel = TRUE)
df_2019 %>%
group_by(Cluster) %>%
summarise(国家数量 = n()) %>%
arrange(desc(国家数量))
df_2019 %>%
group_by(Cluster) %>%
summarise(国家数量 = n()) %>%
arrange(desc(国家数量))
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(ggplot2)
library(dplyr)
# 世界地图（国家级，sf 格式）
world <- ne_countries(scale = "medium", returnclass = "sf")
# 我们的聚类结果（2019 年，含 Cluster 列）
df_2019 <- df_2019 %>% select(Country, Cluster)
# 合并地图和聚类信息（按国家名）
# 注意：world$name 是地图国家名
map_data <- world %>%
left_join(df_2019, by = c("name" = "Country"))
missing <- df_2019$Country[!df_2019$Country %in% world$name]
#print(missing)
df_2019$Country <- recode(df_2019$Country,
"United States" = "United States of America",
"Czech Republic" = "Czechia",
"Trinidad & Tobago" = "Trinidad and Tobago",
"Northern Cyprus" = "Cyprus",  # 地图不单列北塞浦路斯
"Dominican Republic" = "Dominican Rep.",
"Bosnia and Herzegovina" = "Bosnia and Herz.",
"Ivory Coast" = "Côte d'Ivoire",
"Congo (Brazzaville)" = "Republic of the Congo",
"Palestinian Territories" = "Palestine",
"Congo (Kinshasa)" = "Democratic Republic of the Congo",
"Swaziland" = "Eswatini",  # 改国名了
"Central African Republic" = "Central African Rep.",
"South Sudan" = "S. Sudan"
)
ggplot(map_data) +
geom_sf(aes(fill = Cluster), color = "white") +
scale_fill_brewer(palette = "Set2", na.value = "grey90") +
labs(title = "2019年全球幸福特征聚类地图", fill = "聚类类别") +
theme_minimal()
{r}
# 幸福指数地图（同样按 2019）
happiness_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, HappinessScore)
map_score <- world %>%
left_join(happiness_2019, by = c("name" = "Country"))
ggplot(map_score) +
geom_sf(aes(fill = HappinessScore), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
labs(title = "2019年全球幸福指数地图", fill = "幸福指数") +
theme_minimal()
# 幸福指数地图（同样按 2019）
happiness_2019 <- happiness_all %>%
filter(Year == 2019) %>%
select(Country, HappinessScore)
map_score <- world %>%
left_join(happiness_2019, by = c("name" = "Country"))
ggplot(map_score) +
geom_sf(aes(fill = HappinessScore), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
labs(title = "2019年全球幸福指数地图", fill = "幸福指数") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, results = 'hide',warning = FALSE)
options(repos = c(CRAN = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
install.packages(c("tidyverse","stringr"))
install.packages("ggplot2")
install.packages("farver")
install.packages("tzdb")
install.packages("timechange", dependencies = TRUE)
install.packages("ggcorrplot", dependencies = T)
install.packages("factoextra")
install.packages("ggpubr", dependencies = T)
install.packages("broom", dependencies = T)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("sf")
install.packages("showtext")
library(showtext)
library(ggplot2)
# 自动使用 showtext 渲染字体
showtext_auto()
# 添加中文字体
font_add("cn", "./STHeiti Medium.ttc")
theme_set(theme_minimal(base_family = "cn"))
library(dplyr)
library(ggplot2)
# 每年幸福得分的标准差
inequality_trend <- happiness_all %>%
group_by(Year) %>%
summarise(
StdDev = sd(HappinessScore, na.rm = TRUE),
IQR = IQR(HappinessScore, na.rm = TRUE)
)
# 绘图：标准差趋势
ggplot(inequality_trend, aes(x = Year, y = StdDev)) +
geom_line(color = "tomato", size = 1.2) +
geom_point(size = 2) +
labs(title = "每年全球幸福指数标准差变化",
y = "标准差（Std Dev）",
x = "年份") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, results = 'hide',warning = FALSE)
options(repos = c(CRAN = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
install.packages(c("tidyverse","stringr"))
install.packages("ggplot2")
install.packages("farver")
install.packages("tzdb")
install.packages("timechange", dependencies = TRUE)
install.packages("ggcorrplot", dependencies = T)
install.packages("factoextra")
install.packages("ggpubr", dependencies = T)
install.packages("broom", dependencies = T)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("sf")
install.packages("showtext")
library(showtext)
library(ggplot2)
# 自动使用 showtext 渲染字体
showtext_auto()
# 添加中文字体
font_add("cn", "./STHeiti Medium.ttc")
theme_set(theme_minimal(base_family = "cn"))
library(dplyr)
library(ggplot2)
# 每年幸福得分的标准差
inequality_trend <- happiness_all %>%
group_by(Year) %>%
summarise(
StdDev = sd(HappinessScore, na.rm = TRUE),
IQR = IQR(HappinessScore, na.rm = TRUE)
)
# 绘图：标准差趋势
ggplot(inequality_trend, aes(x = Year, y = StdDev)) +
geom_line(color = "tomato", size = 1.2) +
geom_point(size = 2) +
labs(title = "每年全球幸福指数标准差变化",
y = "标准差（Std Dev）",
x = "年份") +
theme_minimal()
# 绘图：IQR 趋势
ggplot(inequality_trend, aes(x = Year, y = IQR)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 2) +
labs(title = "每年全球幸福指数四分位差（IQR）变化",
y = "四分位差（IQR）",
x = "年份") +
theme_minimal()
ggplot(happiness_all, aes(x = as.factor(Year), y = HappinessScore)) +
geom_boxplot(fill = "skyblue") +
labs(title = "幸福指数年度分布箱型图", x = "年份", y = "幸福指数") +
theme_minimal()
